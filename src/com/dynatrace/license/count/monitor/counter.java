
 /**
  * This template file was generated by dynaTrace client.
  * The dynaTrace community portal can be found here: http://community.dynatrace.com/
  * For information how to publish a plugin please visit http://community.dynatrace.com/plugins/contribute/
  **/ 

package com.dynatrace.license.count.monitor;

import com.dynatrace.diagnostics.pdk.*;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.net.MalformedURLException;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;

import javax.net.ssl.*;

import java.security.SecureRandom;
import java.security.cert.X509Certificate;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.apache.http.client.ClientProtocolException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;


public class counter implements Monitor {

	private static final Logger log = Logger.getLogger(counter.class.getName());

	// measure constants
	private static final String METRIC_GROUP = "Agent Count";
	private static final String MSR_DOT_NET = "dotNet Hosts";
	private static final String MSR_DOT_NET_INDIVIDUAL = "dotNet Agents";
	private static final String MSR_JAVA = "Java Agents";
	private static final String MSR_WEB_SERVER = "Web Server Agents";
	private static final String MSR_MESSAGE_BROKER = "Message Broker Agents";
	private static final String MSR_NATIVE = "Native Agents";
	private static final String MSR_UNLICENSED = "Unlicensed Agents";
	private static final String MSR_LICENSED = "Licensed Agents";
	private static final String MSR_PHP = "PHP Agents";
	private static final String MSR_CICS = "CICS Agents";
	
	private Collection<MonitorMeasure>  measures  = null;
	private MonitorMeasure dynamicMeasure;
	
	private double java;
	private double web;
	private double mb;
	private double dotnetindividual;
	private double nativeagent;
	private double unlicensedagent;
	private double licensedagent;
	private double phpagent;
	private double cicsagent;
	private NodeList dotnet;
	
	private NodeList profilelist;
	private NodeList agentgrouplist;
	private NodeList hostlist;
	private NodeList collectorlist;	
	private NodeList versionlist;
	
	private URLConnection connection;
	private URL overviewurl;
	
	private String urlprotocol;
	private int urlport;
	private String dynaTraceURL;
	private String username;
	private String password;
	
	private String profileName;
	private String[] arrayprofileName;
	private String agentGroup;
	
	private String hostName;
	private String[] arrayhostName;
	
	private String collectorName;
	private String[] arraycollectorName;
	
	private String split;

	@Override
	public Status setup(MonitorEnvironment env) throws Exception {
		
		log.finer("*****BEGIN PLUGIN LOGGING*****");
		log.finer("Entering setup method");
		log.finer("Entering variables from plugin.xml");
		
		urlprotocol = env.getConfigString("protocol");
		urlport = env.getConfigLong("httpPort").intValue();
		
		dynaTraceURL = env.getConfigString("agentURL");
		dynaTraceURL = dynaTraceURL.replaceAll(" ", "%20");
		if (!dynaTraceURL.startsWith("/"))
			dynaTraceURL = "/" + dynaTraceURL;
		
		username = env.getConfigString("username");
		password = env.getConfigPassword("password");
		
		profileName = env.getConfigString("systemProfileName");
		arrayprofileName = env.getConfigString("systemProfileName").split(";");
		agentGroup = String.valueOf(env.getConfigBoolean("agentGroup"));
		
		collectorName = env.getConfigString("collectorName");
		arraycollectorName = env.getConfigString("collectorName").split(";");
		
		hostName = env.getConfigString("hostName");
		arrayhostName = env.getConfigString("hostName").split(";");
		
		split = env.getConfigString("systemSplit");
		
		log.finer("URL Protocol: " + urlprotocol);
		log.finer("URL Port: " + urlport);
		log.finer("dT URL: " + dynaTraceURL);
		log.finer("Username: " + username);
		log.finer("Profile Name: " + profileName);
		log.finer("Agent Group: " + agentGroup);
		log.finer("Collector Name: " + collectorName);
		log.finer("Host Name: " + hostName);
		log.finer("Split: " + split);
		
		log.finer("Exiting setup method");
			
		return new Status(Status.StatusCode.Success);
	}

	
	@Override
	public Status execute(MonitorEnvironment env) throws MalformedURLException{
		
		log.finer("Entering execute method");
		
		log.finer("Entering URL Setup");
		overviewurl = new URL(urlprotocol, env.getHost().getAddress(), urlport, dynaTraceURL);		
		
		log.info("Executing URL: " + overviewurl.toString());
		log.finer("Executing URL: " + overviewurl.toString());
		
		try {
			
			log.finer("Entering username/password setup");
			String userpass = username + ":" + password;
			String basicAuth = "Basic " + javax.xml.bind.DatatypeConverter.printBase64Binary(userpass.getBytes());
		
			disableCertificateValidation();
				
			//URL to grab XML file
			log.finer("Entering XML file grab");
			connection = overviewurl.openConnection();
			connection.setRequestProperty("Authorization", basicAuth);
			connection.setConnectTimeout(50000);

			InputStream responseIS = connection.getInputStream();	
			DocumentBuilderFactory xmlFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder docBuilder = xmlFactory.newDocumentBuilder();
			Document xmlDoc = docBuilder.parse(responseIS);
			XPathFactory xpathFact = XPathFactory.newInstance();
			XPath xpath = xpathFact.newXPath();

			//Java 6 doesn't support a string in the switch statement
			log.finer("Entering splitting switch statement");
			int splitSwitch = 0;
			if (split.equals("System Profile"))
				splitSwitch = 1;
			if (split.equals("Host"))
				splitSwitch = 2;
			if (split.equals("Collector"))
				splitSwitch = 3;
			if (split.equals("No Splitting"))
				splitSwitch = 4;
			if (split.equals("Agent Version"))
				splitSwitch = 5;
			log.finer("splitSwitch: " + splitSwitch);
			
			//checks for splitting options
			switch (splitSwitch) {
				
				case 1: //"System Profile"
					
					log.finer("Entering split by System Profile");
					
					//used to store unique profile names
					Set<String> uniqueProfile = new HashSet<String>();
					
					//grabs all the unique profile names and puts them in a string array
					profilelist = (NodeList) xpath.evaluate("/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license,'license ok')]", xmlDoc, XPathConstants.NODESET);
					
					for (int i = 0; i < profilelist.getLength(); ++i){
						String tempstringProfile = profilelist.item(i).getAttributes().getNamedItem("system").toString();
						String[] arraytempProfile = tempstringProfile.split("\"");
						uniqueProfile.add(arraytempProfile[1]);
					}
					
					log.finer("Number of Unique System Profiles: " + uniqueProfile.size());
					
					String[] arrayProfile = uniqueProfile.toArray(new String[0]);
					
					if (arrayprofileName.length==1){ //either none or one filter
						if(arrayprofileName[0].equals("")) //uses no filter
						{
							//if they want all System Profiles
							log.finer("Entering split by all System Profiles");
							
							for (int i = 0; i < uniqueProfile.size(); ++i){
								log.finer("Splitting for System Profile: " + arrayProfile[i]);
								String tempProfileName = arrayProfile[i];
								
								dynamicMetricsSystemProfile(env, xpath, tempProfileName, xmlDoc);
							}	
						}
						else //uses one filter
						{
							//if they want a specific System Profile
							log.finer("Entering split by one System Profile");
							log.finer("Splitting for System Profile: " + profileName);
							
							if(agentGroup.equals("false"))
								staticMetricsSystemProfile(env, xpath, profileName, xmlDoc);
							else
								dynamicMetricsSystemProfile(env, xpath, profileName, xmlDoc);
						}
					}
					else
					{ //uses multiple filters
						//if they want multiple System Profiles
						log.finer("Entering split by multiple System Profiles");
						
						for (int i = 0; i < arrayprofileName.length; ++i){
							log.finer("Splitting for System Profile: " + arrayprofileName[i]);
							String tempProfileName = arrayprofileName[i];
							
							dynamicMetricsSystemProfile(env, xpath, tempProfileName, xmlDoc);
						}
					}
					break;
				case 2: //"Host"
					
					log.finer("Entering split by Host");
					
					//used to store unique host names
					Set<String> uniqueHost = new HashSet<String>();
					
					//grabs all the unique host names and puts them in a string array
					hostlist = (NodeList) xpath.evaluate("/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license,'license ok')]", xmlDoc, XPathConstants.NODESET);
					
					for (int i = 0; i < hostlist.getLength(); ++i){
						String tempstringHost = hostlist.item(i).getAttributes().getNamedItem("host").toString();
						String[] arraytempHost = tempstringHost.split("\"");
						uniqueHost.add(arraytempHost[1]);
					}
					
					log.finer("Number of Unique Hosts: " + uniqueHost.size());
					
					String[] arrayHost = uniqueHost.toArray(new String[0]);
					
					if (arrayhostName.length==1){ //either none or one filter
						if(arrayhostName[0].equals("")) //uses no filter
						{
							//if they want all Hosts
							log.finer("Entering split by all Hosts");
							
							for (int i = 0; i < uniqueHost.size(); ++i){
								log.finer("Splitting for Host: " + arrayHost[i]);
								String tempHostName = arrayHost[i];
								
								dynamicMetricsHost(env, xpath, tempHostName, xmlDoc);
							}	
						}
						else //uses one filter
						{
							//if they want a specific Host
							log.finer("Entering split by one Host");
							log.finer("Splitting for Host: " + hostName);
							
							staticMetricsHost(env, xpath, hostName, xmlDoc);
						}
					}
					else
					{ //uses multiple filters
						//if they want multiple Hosts
						log.finer("Entering split by multiple Hosts");
						
						for (int i = 0; i < arrayhostName.length; ++i){
							log.finer("Splitting for Host: " + arrayhostName[i]);
							String tempHostName = arrayhostName[i];
							
							dynamicMetricsHost(env, xpath, tempHostName, xmlDoc);
						}
					}
					break;
				case 3: //"Collector"
					
					log.finer("Entering split by Collector");
					
					//used to store unique collector names
					Set<String> uniqueCollector = new HashSet<String>();
					
					//grabs all the unique collector names and puts them in a string array
					collectorlist = (NodeList) xpath.evaluate("/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license,'license ok')]", xmlDoc, XPathConstants.NODESET);
					
					for (int i = 0; i < collectorlist.getLength(); ++i){
						String tempstringCollector = collectorlist.item(i).getAttributes().getNamedItem("collector").toString();
						String[] arraytempCollector = tempstringCollector.split("\"");
						uniqueCollector.add(arraytempCollector[1]);
					}
					
					log.finer("Number of Unique Collectors: " + uniqueCollector.size());
					
					String[] arrayCollector = uniqueCollector.toArray(new String[0]);
					
					if (arraycollectorName.length==1){ //either none or one filter
						if(arraycollectorName[0].equals("")) //uses no filter
						{
							//if they want all Collectors
							log.finer("Entering split by all Collectors");
							
							for (int i = 0; i < uniqueCollector.size(); ++i){
								log.finer("Splitting for Collector: " + arrayCollector[i]);
								String tempCollectorName = arrayCollector[i];
								
								dynamicMetricsCollector(env, xpath, tempCollectorName, xmlDoc);
							}	
						}
						else //uses one filter
						{
							//if they want a specific Collector
							log.finer("Entering split by one Collector");
							log.finer("Splitting for Collector: " + collectorName);
							
							staticMetricsCollector(env, xpath, collectorName, xmlDoc);
						}
					}
					else
					{ //uses multiple filters
						//if they want multiple Hosts
						log.finer("Entering split by multiple Collectors");
						
						for (int i = 0; i < arraycollectorName.length; ++i){
							log.finer("Splitting for Collector: " + arraycollectorName[i]);
							String tempCollectorName = arraycollectorName[i];
							
							dynamicMetricsCollector(env, xpath, tempCollectorName, xmlDoc);
						}
					}
					break;
				case 4: //"No Splitting"
					
					log.finer("Entering split by No Splitting");
					
					//if they want no splitting
					java = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @technology='Java'])",xmlDoc,XPathConstants.NUMBER);
					web = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @technology='Web server'])",xmlDoc,XPathConstants.NUMBER);
					mb = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @technology='WebSphere Message Broker'])",xmlDoc,XPathConstants.NUMBER);
					nativeagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @technology='Native'])",xmlDoc,XPathConstants.NUMBER);
					phpagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @technology='PHP'])",xmlDoc,XPathConstants.NUMBER);
					cicsagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @technology='CICS'])",xmlDoc,XPathConstants.NUMBER);
					dotnetindividual = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @technology='.NET'])",xmlDoc,XPathConstants.NUMBER);
					dotnet = (NodeList) xpath.evaluate("/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license,'license ok') and @technology='.NET']", xmlDoc, XPathConstants.NODESET);
					licensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok')])",xmlDoc,XPathConstants.NUMBER);
					unlicensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[not(contains(@license, 'license ok')) and @capture='false'])",xmlDoc,XPathConstants.NUMBER);
					
					collectStaticMetrics(env, xpath);
					
					break;
				case 5: //"Agent Version"
					
					log.finer("Entering split by Agent Version");
					
					//used to store unique version numbers
					Set<String> uniqueVersion = new HashSet<String>();
					
					//grabs all the unique version numbers and puts them in a string array
					versionlist = (NodeList) xpath.evaluate("/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license,'license ok')]", xmlDoc, XPathConstants.NODESET);
					
					for (int i = 0; i < versionlist.getLength(); ++i){
						String tempstringVersion = versionlist.item(i).getAttributes().getNamedItem("version").toString();
						String[] arraytempVersion = tempstringVersion.split("\"");
						uniqueVersion.add(arraytempVersion[1]);
					}
					
					log.finer("Number of Unique Agent Versions: " + uniqueVersion.size());
					
					String[] arrayVersion = uniqueVersion.toArray(new String[0]);
					
					//if they want all Agent Versions
					log.finer("Entering split by all Agent Versions");
					
					for (int i = 0; i < uniqueVersion.size(); ++i){
						log.finer("Splitting for Agent Version: " + arrayVersion[i]);
						
						String tempVersionName = arrayVersion[i];
						
						java = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @version='" + tempVersionName + "' and @technology='Java'])",xmlDoc,XPathConstants.NUMBER);
						web = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @version='" + tempVersionName + "' and @technology='Web server'])",xmlDoc,XPathConstants.NUMBER);
						mb = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @version='" + tempVersionName + "' and @technology='WebSphere Message Broker'])",xmlDoc,XPathConstants.NUMBER);
						nativeagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @version='" + tempVersionName + "' and @technology='Native'])",xmlDoc,XPathConstants.NUMBER);
						phpagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @version='" + tempVersionName + "' and @technology='PHP'])",xmlDoc,XPathConstants.NUMBER);
						cicsagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @version='" + tempVersionName + "' and @technology='CICS'])",xmlDoc,XPathConstants.NUMBER);
						dotnetindividual = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @version='" + tempVersionName + "' and @technology='.NET'])",xmlDoc,XPathConstants.NUMBER);
						dotnet = (NodeList) xpath.evaluate("/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license,'license ok') and @version='" + tempVersionName + "' and @technology='.NET']", xmlDoc, XPathConstants.NODESET);
						licensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @version='" + tempVersionName + "'])",xmlDoc,XPathConstants.NUMBER);
						unlicensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[not(contains(@license, 'license ok')) and @version='" + tempVersionName + "' and @capture='false'])",xmlDoc,XPathConstants.NUMBER);
						
						collectDynamicMetrics(env, xpath, "Version Number", tempVersionName);
					}	
					
					break;
			}
		} catch (ClientProtocolException e) {
			log.info("ClientProtocolException: " + e);
			return new Status(Status.StatusCode.ErrorInternal);

		} catch (IOException e) {
			log.info("IOException: " + e);
			return new Status(Status.StatusCode.ErrorInternal);

		} catch (Exception e){
			log.info("Exception: " + e);
			return new Status(Status.StatusCode.ErrorInternal);
		}
		
		log.finer("Exiting execute method");
		log.finer("*****END PLUGIN LOGGING*****");
		
		return new Status(Status.StatusCode.Success);
	}
	
	private void collectStaticMetrics(MonitorEnvironment env, XPath xpath) {
		
		log.finer("Entering collectStaticMetrics method");
		
		//used to store unique .NET server names
		Set<String> uniqueNet = new HashSet<String>();
		
		for (int j = 0; j < dotnet.getLength(); ++j){
			uniqueNet.add(dotnet.item(j).getAttributes().getNamedItem("host").toString());
		}
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_JAVA)) != null) {
			for (MonitorMeasure measure : measures)
				measure.setValue(java);
		}
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_WEB_SERVER)) != null) {
			for (MonitorMeasure measure : measures)
				measure.setValue(web);
		}
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_MESSAGE_BROKER)) != null) {
			for (MonitorMeasure measure : measures)
				measure.setValue(mb);
		}
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_NATIVE)) != null) {
			for (MonitorMeasure measure : measures)
				measure.setValue(nativeagent);
		}
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_UNLICENSED)) != null) {
			for (MonitorMeasure measure : measures)
				measure.setValue(unlicensedagent);
		}
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_LICENSED)) != null) {
			for (MonitorMeasure measure : measures)
				measure.setValue(licensedagent);
		}
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_PHP)) != null) {
			for (MonitorMeasure measure : measures)
				measure.setValue(phpagent);
		}
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_CICS)) != null) {
			for (MonitorMeasure measure : measures)
				measure.setValue(cicsagent);
		}
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_DOT_NET_INDIVIDUAL)) != null) {
			for (MonitorMeasure measure : measures)
				measure.setValue(dotnetindividual);
		}
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_DOT_NET)) != null) {
			for (MonitorMeasure measure : measures)
				measure.setValue((double)uniqueNet.size());
		}
		
		log.finer("Entering collectStaticMetrics method");
	}

	private void staticMetricsSystemProfile(MonitorEnvironment env,
			XPath xpath, String profileName, Document xmlDoc) throws XPathExpressionException {
		
		log.finer("Entering staticMetricsSystemProfile method");
		
		java = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + profileName + "' and @technology='Java'])",xmlDoc,XPathConstants.NUMBER);
		web = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + profileName + "' and @technology='Web server'])",xmlDoc,XPathConstants.NUMBER);
		mb = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + profileName + "' and @technology='WebSphere Message Broker'])",xmlDoc,XPathConstants.NUMBER);
		nativeagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + profileName + "' and @technology='Native'])",xmlDoc,XPathConstants.NUMBER);
		phpagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + profileName + "' and @technology='PHP'])",xmlDoc,XPathConstants.NUMBER);
		cicsagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + profileName + "' and @technology='CICS'])",xmlDoc,XPathConstants.NUMBER);
		dotnetindividual = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + profileName + "' and @technology='.NET'])",xmlDoc,XPathConstants.NUMBER);
		dotnet = (NodeList) xpath.evaluate("/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license,'license ok') and @system='" + profileName + "' and @technology='.NET']", xmlDoc, XPathConstants.NODESET);
		licensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + profileName + "'])",xmlDoc,XPathConstants.NUMBER);
		unlicensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[not(contains(@license, 'license ok')) and @system='" + profileName + "' and @capture='false'])",xmlDoc,XPathConstants.NUMBER);
		
		collectStaticMetrics(env, xpath);
		
		log.finer("Exiting staticMetricsSystemProfile method");
	}
	
	private void staticMetricsHost(MonitorEnvironment env, XPath xpath,
			String hostName2, Document xmlDoc) throws XPathExpressionException {
		
		log.finer("Entering staticMetricsHost method");
		
		java = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + hostName + "' and @technology='Java'])",xmlDoc,XPathConstants.NUMBER);
		web = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + hostName + "' and @technology='Web server'])",xmlDoc,XPathConstants.NUMBER);
		mb = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + hostName + "' and @technology='WebSphere Message Broker'])",xmlDoc,XPathConstants.NUMBER);
		nativeagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + hostName + "' and @technology='Native'])",xmlDoc,XPathConstants.NUMBER);
		phpagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + hostName + "' and @technology='PHP'])",xmlDoc,XPathConstants.NUMBER);
		cicsagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + hostName + "' and @technology='CICS'])",xmlDoc,XPathConstants.NUMBER);
		dotnetindividual = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + hostName + "' and @technology='.NET'])",xmlDoc,XPathConstants.NUMBER);
		dotnet = (NodeList) xpath.evaluate("/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license,'license ok') and @host='" + hostName + "' and @technology='.NET']", xmlDoc, XPathConstants.NODESET);
		licensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + hostName + "'])",xmlDoc,XPathConstants.NUMBER);
		unlicensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[not(contains(@license, 'license ok')) and @host='" + hostName + "' and @capture='false'])",xmlDoc,XPathConstants.NUMBER);
		
		collectStaticMetrics(env, xpath);
		
		log.finer("Exiting staticMetricsHost method");
		
	}

	private void staticMetricsCollector(MonitorEnvironment env, XPath xpath,
			String collectorName2, Document xmlDoc) throws XPathExpressionException {

		log.finer("Entering staticMetricsCollector method");
		
		java = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + collectorName + "' and @technology='Java'])",xmlDoc,XPathConstants.NUMBER);
		web = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + collectorName + "' and @technology='Web server'])",xmlDoc,XPathConstants.NUMBER);
		mb = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + collectorName + "' and @technology='WebSphere Message Broker'])",xmlDoc,XPathConstants.NUMBER);
		nativeagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + collectorName + "' and @technology='Native'])",xmlDoc,XPathConstants.NUMBER);
		phpagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + collectorName + "' and @technology='PHP'])",xmlDoc,XPathConstants.NUMBER);
		cicsagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + collectorName + "' and @technology='CICS'])",xmlDoc,XPathConstants.NUMBER);
		dotnetindividual = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + collectorName + "' and @technology='.NET'])",xmlDoc,XPathConstants.NUMBER);
		dotnet = (NodeList) xpath.evaluate("/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license,'license ok') and @collector='" + collectorName + "' and @technology='.NET']", xmlDoc, XPathConstants.NODESET);
		licensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + collectorName + "'])",xmlDoc,XPathConstants.NUMBER);
		unlicensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[not(contains(@license, 'license ok')) and @collector='" + collectorName + "' and @capture='false'])",xmlDoc,XPathConstants.NUMBER);
		
		collectStaticMetrics(env, xpath);
		
		log.finer("Exiting staticMetricsCollector method");
	}

	private void collectDynamicMetrics(MonitorEnvironment env, XPath xpath,
			String tempSplitString, String tempSplitName) {
		
		log.finer("Entering collectDynamicMetrics method");
		
		//used to store unique .NET server names
		Set<String> uniqueNet = new HashSet<String>();
		
		for (int j = 0; j < dotnet.getLength(); ++j){
			uniqueNet.add(dotnet.item(j).getAttributes().getNamedItem("host").toString());
		}
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_JAVA)) != null) {
			for (MonitorMeasure measure : measures){
				dynamicMeasure = env.createDynamicMeasure(measure, tempSplitString, tempSplitName);
			    dynamicMeasure.setValue(java);
			}								
		}	
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_WEB_SERVER)) != null) {
			for (MonitorMeasure measure : measures){
				dynamicMeasure = env.createDynamicMeasure(measure, tempSplitString, tempSplitName);
			    dynamicMeasure.setValue(web);
			}								
		}	
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_MESSAGE_BROKER)) != null) {
			for (MonitorMeasure measure : measures){
				dynamicMeasure = env.createDynamicMeasure(measure, tempSplitString, tempSplitName);
			    dynamicMeasure.setValue(mb);
			}								
		}	
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_NATIVE)) != null) {
			for (MonitorMeasure measure : measures){
				dynamicMeasure = env.createDynamicMeasure(measure, tempSplitString, tempSplitName);
			    dynamicMeasure.setValue(nativeagent);
			}								
		}	
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_UNLICENSED)) != null) {
			for (MonitorMeasure measure : measures){
				dynamicMeasure = env.createDynamicMeasure(measure, tempSplitString, tempSplitName);
			    dynamicMeasure.setValue(unlicensedagent);
			}								
		}		
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_LICENSED)) != null) {
			for (MonitorMeasure measure : measures){
				dynamicMeasure = env.createDynamicMeasure(measure, tempSplitString, tempSplitName);
			    dynamicMeasure.setValue(licensedagent);
			}								
		}	
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_PHP)) != null) {
			for (MonitorMeasure measure : measures){
				dynamicMeasure = env.createDynamicMeasure(measure, tempSplitString, tempSplitName);
			    dynamicMeasure.setValue(phpagent);
			}								
		}		
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_CICS)) != null) {
			for (MonitorMeasure measure : measures){
				dynamicMeasure = env.createDynamicMeasure(measure, tempSplitString, tempSplitName);
			    dynamicMeasure.setValue(cicsagent);
			}								
		}		
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_DOT_NET_INDIVIDUAL)) != null) {
			for (MonitorMeasure measure : measures){
				dynamicMeasure = env.createDynamicMeasure(measure, tempSplitString, tempSplitName);
			    dynamicMeasure.setValue(dotnetindividual);
			}								
		}	
		
		if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_DOT_NET)) != null) {
			for (MonitorMeasure measure : measures){
				dynamicMeasure = env.createDynamicMeasure(measure, tempSplitString, tempSplitName);
		    	dynamicMeasure.setValue((double)uniqueNet.size());
			}
		}
		
		log.finer("Exiting collectDynamicMetrics method");
	}

	private void dynamicMetricsSystemProfile(MonitorEnvironment env,
			XPath xpath, String tempProfileName, Document xmlDoc) throws XPathExpressionException {
		
		log.finer("Entering dynamicMetricsSystemProfile method");
		
		if(agentGroup.equals("true")){
			//grabs all the unique agent group names for the current system profile and puts them in a string array
			agentgrouplist = (NodeList) xpath.evaluate("/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license,'license ok') and @system='" + tempProfileName + "']", xmlDoc, XPathConstants.NODESET);
			
			//used to store unique agent group names
			Set<String> uniqueAgentGroup = new HashSet<String>();
			
			for (int i = 0; i < agentgrouplist.getLength(); ++i){
				String tempstringAgentGroup = agentgrouplist.item(i).getAttributes().getNamedItem("group").toString();
				String[] arraytempAgentGroup = tempstringAgentGroup.split("\"");
				uniqueAgentGroup.add(arraytempAgentGroup[1]);
			}
			
			log.finer("Number of Unique Agent Groups: " + uniqueAgentGroup.size());
			
			String[] arrayAgentGroup = uniqueAgentGroup.toArray(new String[0]);
			
			for (int i = 0;i < arrayAgentGroup.length;i++){
				
				log.finer("Splitting for Agent Group: " + arrayAgentGroup[i]);
				
				String tempAgentGroupName = arrayAgentGroup[i];
				
				java = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "' and @group='" + tempAgentGroupName + "' and @technology='Java'])",xmlDoc,XPathConstants.NUMBER);
				web = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "' and  @group='" + tempAgentGroupName + "' and @technology='Web server'])",xmlDoc,XPathConstants.NUMBER);
				mb = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "' and  @group='" + tempAgentGroupName + "' and @technology='WebSphere Message Broker'])",xmlDoc,XPathConstants.NUMBER);
				nativeagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "' and  @group='" + tempAgentGroupName + "' and @technology='Native'])",xmlDoc,XPathConstants.NUMBER);
				phpagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "' and  @group='" + tempAgentGroupName + "' and @technology='PHP'])",xmlDoc,XPathConstants.NUMBER);
				cicsagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "' and  @group='" + tempAgentGroupName + "' and @technology='CICS'])",xmlDoc,XPathConstants.NUMBER);
				dotnetindividual = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "' and  @group='" + tempAgentGroupName + "' and @technology='.NET'])",xmlDoc,XPathConstants.NUMBER);
				dotnet = (NodeList) xpath.evaluate("/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license,'license ok') and @system='" + tempProfileName + "' and  @group='" + tempAgentGroupName + "' and @technology='.NET']", xmlDoc, XPathConstants.NODESET);
				licensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "' and  @group='" + tempAgentGroupName + "'])",xmlDoc,XPathConstants.NUMBER);
				unlicensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[not(contains(@license, 'license ok')) and @system='" + tempProfileName + "' and  @group='" + tempAgentGroupName + "' and @capture='false'])",xmlDoc,XPathConstants.NUMBER);
				
				collectDynamicMetrics(env, xpath, "Profile Name/Agent Group", tempProfileName + "/" + tempAgentGroupName);
			}
		}
		else
		{
			java = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "' and @technology='Java'])",xmlDoc,XPathConstants.NUMBER);
			web = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "' and @technology='Web server'])",xmlDoc,XPathConstants.NUMBER);
			mb = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "' and @technology='WebSphere Message Broker'])",xmlDoc,XPathConstants.NUMBER);
			nativeagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "' and @technology='Native'])",xmlDoc,XPathConstants.NUMBER);
			phpagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "' and @technology='PHP'])",xmlDoc,XPathConstants.NUMBER);
			cicsagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "' and @technology='CICS'])",xmlDoc,XPathConstants.NUMBER);
			dotnetindividual = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "' and @technology='.NET'])",xmlDoc,XPathConstants.NUMBER);
			dotnet = (NodeList) xpath.evaluate("/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license,'license ok') and @system='" + tempProfileName + "' and @technology='.NET']", xmlDoc, XPathConstants.NODESET);
			licensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @system='" + tempProfileName + "'])",xmlDoc,XPathConstants.NUMBER);
			unlicensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[not(contains(@license, 'license ok')) and @system='" + tempProfileName + "' and @capture='false'])",xmlDoc,XPathConstants.NUMBER);
			
			collectDynamicMetrics(env, xpath, "Profile Name", tempProfileName);
		}
		log.finer("Exiting dynamicMetricsSystemProfile method");
	}
	
	private void dynamicMetricsHost(MonitorEnvironment env, XPath xpath,
			String tempHostName, Document xmlDoc) throws XPathExpressionException {
		
		log.finer("Entering dynamicMetricsHost method");
		
		java = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + tempHostName + "' and @technology='Java'])",xmlDoc,XPathConstants.NUMBER);
		web = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + tempHostName + "' and @technology='Web server'])",xmlDoc,XPathConstants.NUMBER);
		mb = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + tempHostName + "' and @technology='WebSphere Message Broker'])",xmlDoc,XPathConstants.NUMBER);
		nativeagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + tempHostName + "' and @technology='Native'])",xmlDoc,XPathConstants.NUMBER);
		phpagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + tempHostName + "' and @technology='PHP'])",xmlDoc,XPathConstants.NUMBER);
		cicsagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + tempHostName + "' and @technology='CICS'])",xmlDoc,XPathConstants.NUMBER);
		dotnetindividual = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + tempHostName + "' and @technology='.NET'])",xmlDoc,XPathConstants.NUMBER);
		dotnet = (NodeList) xpath.evaluate("/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license,'license ok') and @host='" + tempHostName + "' and @technology='.NET']", xmlDoc, XPathConstants.NODESET);
		licensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @host='" + tempHostName + "'])",xmlDoc,XPathConstants.NUMBER);
		unlicensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[not(contains(@license, 'license ok')) and @host='" + tempHostName + "' and @capture='false'])",xmlDoc,XPathConstants.NUMBER);
		
		collectDynamicMetrics(env, xpath, "Host Name", tempHostName);
		
		log.finer("Exiting dynamicMetricsHost method");
	}
	
	private void dynamicMetricsCollector(MonitorEnvironment env, XPath xpath,
			String tempCollectorName, Document xmlDoc) throws XPathExpressionException {
		
		log.finer("Entering dynamicMetricsCollector method");
		
		java = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + tempCollectorName + "' and @technology='Java'])",xmlDoc,XPathConstants.NUMBER);
		web = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + tempCollectorName + "' and @technology='Web server'])",xmlDoc,XPathConstants.NUMBER);
		mb = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + tempCollectorName + "' and @technology='WebSphere Message Broker'])",xmlDoc,XPathConstants.NUMBER);
		nativeagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + tempCollectorName + "' and @technology='Native'])",xmlDoc,XPathConstants.NUMBER);
		phpagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + tempCollectorName + "' and @technology='PHP'])",xmlDoc,XPathConstants.NUMBER);
		cicsagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + tempCollectorName + "' and @technology='CICS'])",xmlDoc,XPathConstants.NUMBER);
		dotnetindividual = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + tempCollectorName + "' and @technology='.NET'])",xmlDoc,XPathConstants.NUMBER);
		dotnet = (NodeList) xpath.evaluate("/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license,'license ok') and @collector='" + tempCollectorName + "' and @technology='.NET']", xmlDoc, XPathConstants.NODESET);
		licensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[contains(@license, 'license ok') and @collector='" + tempCollectorName + "'])",xmlDoc,XPathConstants.NUMBER);
		unlicensedagent = (Double) xpath.evaluate("count(/dashboardreport/data/agentsoverviewdashlet/agents/agent[not(contains(@license, 'license ok')) and @collector='" + tempCollectorName + "' and @capture='false'])",xmlDoc,XPathConstants.NUMBER);
		
		collectDynamicMetrics(env, xpath, "Collector Name", tempCollectorName);
		
		log.finer("Exiting dynamicMetricsCollector method");
	}

	@Override
	public void teardown(MonitorEnvironment env) throws Exception {

	}
	
	public static void disableCertificateValidation() {
		
		log.finer("Entering disableCertificateValidation method");  
		
		// Create a trust manager that does not validate certificate chains
		  TrustManager[] trustAllCerts = new TrustManager[] { 
		    new X509TrustManager() {
		      public X509Certificate[] getAcceptedIssuers() { 
		        return new X509Certificate[0]; 
		      }
		      public void checkClientTrusted(X509Certificate[] certs, String authType) {}
		      public void checkServerTrusted(X509Certificate[] certs, String authType) {}
		  }};

		  // Ignore differences between given hostname and certificate hostname
		  HostnameVerifier hv = new HostnameVerifier() {
		    public boolean verify(String hostname, SSLSession session) { return true; }
		  };

		  // Install the all-trusting trust manager
		  try {
		    SSLContext sc = SSLContext.getInstance("SSL");
		    sc.init(null, trustAllCerts, new SecureRandom());
		    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
		    HttpsURLConnection.setDefaultHostnameVerifier(hv);
		  } catch (Exception e) {}
		  
		  log.finer("Leaving disableCertificateValidation method");
	}
}
